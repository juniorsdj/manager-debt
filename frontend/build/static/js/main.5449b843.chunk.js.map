{"version":3,"sources":["Pages/Login/index.jsx","Services/AxiosApi.jsx","Services/Requests.js","components/form/FormFields.jsx","Pages/Debts/DebtForm.jsx","Pages/Debts/DebtsList.jsx","constants.js","Pages/Debts/index.jsx","App.jsx","index.jsx"],"names":["Login","handleResponseSuccess","response","a","data","handleResponseError","error","status","errors","msg","map","messages","join","i","console","log","message","Promise","reject","AxiosApi","axios","defaults","baseURL","interceptors","use","debtsRequests","page","sort","get","obj","keys","Object","filter","key","retorno","forEach","queryString","stringify","stringifyQueryString","_id","delete","userId","reason","value","debtDate","post","String","Number","debtId","put","usersRequests","SelectField","props","required","useState","valueDefault","setValueDefault","useEffect","setValue","name","register","Form","Field","width","label","Dropdown","selection","search","placeholder","options","loading","onChange","event","clearError","className","type","DebtForm","debt","isOpened","onClose","isLoading","setIsLoading","usersOptions","setUsersOptions","actionForm","setActionForm","useForm","handleSubmit","handleSubmitForm","createDebt","editDebt","then","r","catch","err","user","id","text","isEmpty","format","Date","locale","br","adjustValuesToEdit","Modal","open","Header","icon","content","Content","onSubmit","Group","inline","widths","disabled","ref","step","Actions","Button","color","onClick","form","OPTIONS_SORT","DebtsList","isUpdatedList","setIsUpdatedList","listDebts","setListDebts","totalCountDebts","setTotalCountDebts","totalPages","setTotalPages","activePage","setActivePage","sortSearch","setSortSearch","modalIsOpened","setModalIsOpened","debtSelected","setDebtSelected","renderDebtRow","Table","Row","textAlign","Cell","userName","createdAt","style","padding","e","stopPropagation","window","confirm","Math","ceil","removeDebt","Icon","totalCount","Container","Breadcrumb","Section","href","Divider","active","setState","getPlaces","control","ev","padded","HeaderCell","Body","Pagination","defaultActivePage","onPageChange","Debts","path","component","exact","App","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.5449b843.chunk.js","sourcesContent":["function Login() {\n   return <div>\n    <h1>tela login</h1>\n  </div>;\n}\n\nexport default Login;\n","import React from 'react';\nimport axios from 'axios';\n\n\nexport const handleResponseSuccess = async function (response) {\n\n    return response.data;\n};\nexport const handleResponseError = async (error) => {\n\n    if (error.response) {\n        const {\n            response: { status, data },\n        } = error;\n        switch (status) {\n            case 400:\n                const { errors } = data;\n                const msg = (\n                    <div>\n                        <strong>[ERR400]:</strong>\n                        <div>\n                            {errors\n                                .map((error) => error.messages.join(' - '))\n                                .map((error, i) => (\n                                    <div key={i}>{error}</div>\n                                ))}\n                        </div>\n                    </div>\n                );\n                console.log(msg)\n                break;\n            case 401:\n                //TODO implementar regra de segurança para 401 nos requests\n                break;\n            case 403:\n                //TODO implementar regra de segurança para 403 nos requests\n                break;\n            default:\n\n        }\n    } else {\n        if (error.message === 'Network Error') {\n            // TODO implementar o que será feito em casos de network error\n        }\n    }\n\n    return Promise.reject(error);\n};\n\nconst AxiosApi = axios;\nAxiosApi.defaults.baseURL = \"https://backend-manager-debt.herokuapp.com\";\nAxiosApi.interceptors.response.use(handleResponseSuccess, handleResponseError);\n\nexport const setBearerToken = (token) => {\n    AxiosApi.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n};\n\nexport default AxiosApi;\n","import AxiosApi from './AxiosApi';\nimport queryString from 'query-string';\n\nconst stringifyQueryString = (obj) => {\n    // eslint-disable-next-line \n    const keys = Object.keys(obj).filter(key => obj[key] != '');\n    const retorno = {};\n    keys.forEach(key => (retorno[key] = obj[key]));\n    return queryString.stringify(retorno);\n};\n\n\nexport const debtsRequests = {\n    getAll: ({ page, sort }) => {\n        return AxiosApi.get(`/debts?${stringifyQueryString({ page, sort })}`);\n    },\n    getDebtById: (_id) => {\n        return AxiosApi.get(`/debts/${_id}`);\n    },\n    getDebtByUserId: (userId) => {\n        return AxiosApi.get(`/debts/users/${userId}`);\n    },\n    deleteDebtById: (_id) => {\n        return AxiosApi.delete(`/debts/${_id}`);\n    },\n    createDebt: ({ userId, reason, value, debtDate }) => {\n        return AxiosApi.post(`/debts`, {\n            userId: String(userId), reason, value: Number(value), debtDate\n        });\n    },\n    updateDebt: (debtId, { reason, value, debtDate }) => {\n        return AxiosApi.put(`/debts/${debtId}`, {\n             reason, value: Number(value), debtDate\n        });\n    },\n}\n\nexport const usersRequests = {\n    getAll: () => {\n        return AxiosApi.get(`/users`);\n    }\n}\n","import React, { useState, useEffect } from 'react'\nimport { Form,  Dropdown, } from 'semantic-ui-react'\n\nexport const SelectField = (props) => {\n    const { required, value } = props\n\n\n    const [valueDefault, setValueDefault] = useState(value ? value : '')\n\n    useEffect(() => {   \n        props.setValue(props.name, valueDefault)\n    })\n\n    useEffect(() => {\n        props.register({ name: props.name }, { required });\n    }, [props.register])\n\n    return (\n        <Form.Field width={props.width} error={props.errors ? true : false}>\n            <label>{props.label}</label>\n            <Dropdown\n                selection\n                search={props.search}\n                placeholder={props.placeholder}\n                options={props.options}\n                value={valueDefault}\n                loading={props.loading}\n                onChange={(event, data) => {\n                    setValueDefault(data.value)\n                    props.setValue(props.name, data.value)\n                    if (props.errors && props.clearError) {\n                        props.clearError(props.name)\n                    }\n                }}\n            />\n\n            <span className='fieldWithError'>{props.errors && props.errors.type === 'required' && 'Obrigatório'}</span>\n        </Form.Field>\n    )\n}","import { isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Form, Button, Modal, Header } from 'semantic-ui-react'\nimport { useForm } from 'react-hook-form';\nimport br from 'date-fns/locale/pt-BR';\nimport { usersRequests, debtsRequests } from './../../Services/Requests'\nimport { SelectField } from '../../components/form/FormFields';\nimport { format } from 'date-fns';\n\nimport './index.css'\n\nconst DebtForm = ({ debt, isOpened, onClose }) => {\n    const [isLoading, setIsLoading] = useState(false)\n    const [usersOptions, setUsersOptions] = useState([])\n    const [actionForm, setActionForm] = useState('Cadastrar');\n\n    const { handleSubmit, register, setValue } = useForm();\n\n    const handleSubmitForm = async (data) => {\n        try {\n            switch (actionForm) {\n                case 'Cadastrar':\n                    return await createDebt(data);\n                case 'Editar':\n                    if (debt)\n                        await editDebt(debt._id, data);\n                    return;\n                default:\n            }\n            console.log(data)\n        } catch (err) {\n            console.log(err)\n        }\n    }\n    const createDebt = async (data) => {\n        setIsLoading(true)\n        debtsRequests.createDebt(data)\n            .then(r => {\n                setIsLoading(false)\n                if (r.r) {\n                    console.log(\"sucesso\")\n                    onClose(true)\n                } else {\n                    console.log(r.errors)\n                }\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n    const editDebt = async (debtId, data) => {\n        setIsLoading(true)\n        debtsRequests.updateDebt(debtId, data)\n            .then(r => {\n                setIsLoading(false)\n                if (r.r) {\n                    console.log(\"sucesso\")\n                    onClose(true)\n                } else {\n                    console.log(r.errors)\n                }\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n\n\n\n    function adjustValuesToEdit(debt) {\n        setActionForm('Editar');\n        setValue('userId', Number(debt.userId));\n        debt.debtDate && setValue('debtDate', format(\n            new Date(debt.debtDate),\n            'yyyy-MM-dd',\n            {\n                locale: br,\n            },\n        ));\n        setValue('value', debt.value);\n        setValue('reason', debt.reason);\n    }\n\n\n\n    useEffect(() => {\n        setIsLoading(true)\n        usersRequests.getAll()\n            .then(r => {\n                setIsLoading(false)\n                if (r.r) {\n                    setUsersOptions(r.data.map(user => {\n                        return {\n                            value: user.id,\n                            text: user.name\n                        }\n                    }))\n                } else {\n                    //aqui seria interessante implementar um toast para mostrar que os errors que veio do back\n                    console.log(r.errors)\n                }\n            }).catch(err => {\n                //seria interessante colocar uma melhor tratativa do erro, como um toast \n                setIsLoading(false)\n                console.log(err)\n            })\n\n    }, [])\n\n\n    useEffect(() => {\n        if (!isEmpty(debt)) {\n            return adjustValuesToEdit(debt);\n        } else {\n            setActionForm(\"Cadastrar\")\n        }\n    }, [debt]);\n    return (\n        <Modal\n            onClose={onClose}\n            open={isOpened}\n        >\n            <Header icon='money bill alternate outline' content='Dívida' />\n            <Modal.Content>\n                <Form id=\"id-form\" onSubmit={handleSubmit(handleSubmitForm)}>\n                    <Form.Group inline widths='equal'>\n                        {\n                            actionForm === 'Cadastrar' && (\n                                <Form.Field>\n                                    <SelectField\n                                        name='userId'\n                                        label='Nome'\n                                        register={register}\n                                        options={usersOptions}\n                                        setValue={setValue}\n                                        disabled={isLoading}\n                                        required\n                                        placeholder='José de Abreu da Silva'\n                                    />\n                                </Form.Field>\n                            )\n                        }\n\n\n                        <Form.Field className=\"required\">\n                            <label>Motivo</label>\n                            <div className=\"ui fluid input\">\n                                <input ref={register} name=\"reason\" placeholder=\"Cartão de crédito\"\n                                    required\n                                    type=\"text\" />\n                            </div>\n                        </Form.Field>\n                        <Form.Field className=\"required\">\n                            <label>Valor</label>\n                            <div className=\"ui fluid input\">\n                                <label>R$</label>\n                                <input ref={register} name=\"value\" step=\"0.01\" placeholder=\"40,00\"\n                                    required\n                                    type=\"number\" />\n                            </div>\n                        </Form.Field>\n\n\n                    </Form.Group>\n                    <Form.Group inline widths=\"4\">\n                        <Form.Field className=\"required\">\n                            <label>Data da  dívida</label>\n                            <div className=\"ui fluid input\">\n                                <input ref={register} name=\"debtDate\" placeholder=\"01/01/2021\"\n                                    required\n                                    type=\"date\" />\n                            </div>\n                        </Form.Field>\n                    </Form.Group>\n                </Form>\n            </Modal.Content>\n            <Modal.Actions>\n                <Button color='black' onClick={onClose}>\n                    Cancelar\n                </Button>\n                <Button form=\"id-form\" color=\"green\"\n                    loading={isLoading}\n                    disabled={isLoading}>\n                    {actionForm}\n                </Button>\n            </Modal.Actions>\n        </Modal >\n    );\n};\n\nexport default DebtForm;","import React, { useEffect, useState } from 'react';\nimport { Container, Table, Pagination, Breadcrumb, Form, Dropdown, Icon, Button } from 'semantic-ui-react';\nimport { format } from 'date-fns';\nimport br from 'date-fns/locale/pt-BR';\nimport { debtsRequests } from './../../Services/Requests'\nimport { SIZE_DEFAULT_PAGE } from './../../constants'\nimport DebtForm from './DebtForm'\n\nconst OPTIONS_SORT = [\n    {\n        key: \"value_asc\",\n        value: \"value_asc\",\n        text: \"Valor da dívida crescente\"\n    },\n    {\n        key: \"value_desc\",\n        value: \"value_desc\",\n        text: \"Valor da dívida decrescente\"\n    },\n    {\n        key: \"debt_date_asc\",\n        value: \"debt_date_asc\",\n        text: \"Data da dívida crescente\"\n    },\n    {\n        key: \"debt_date_desc\",\n        value: \"debt_date_desc\",\n        text: \"Data da dívida decrescente\"\n    },\n]\nconst DebtsList = () => {\n    const [isLoading, setIsLoading] = useState(false)\n    const [isUpdatedList, setIsUpdatedList] = useState(false)\n    const [listDebts, setListDebts] = useState([])\n    const [totalCountDebts, setTotalCountDebts] = useState(0)\n    const [totalPages, setTotalPages] = useState(0)\n    const [activePage, setActivePage] = useState(1)\n    const [sortSearch, setSortSearch] = useState(\"debt_date_desc\")\n    const [modalIsOpened, setModalIsOpened] = useState(false)\n    const [debtSelected, setDebtSelected] = useState({})\n\n\n    useEffect(() => {\n        setIsLoading(true)\n\n\n        debtsRequests.getAll({ page: activePage, sort: sortSearch })\n            .then((r) => {\n                if (r.r) {\n                    setIsLoading(false)\n                    setListDebts(r.data)\n                    setTotalCountDebts(r.totalCount)\n                    setTotalPages(Math.ceil(r.totalCount / SIZE_DEFAULT_PAGE))\n                }\n            })\n            .catch(\n                err => {\n                    setIsLoading(false)\n                    console.log(err)\n                }\n            )\n    }, [activePage, sortSearch, isUpdatedList])\n\n\n    function removeDebt(debtId) {\n        if (!window.confirm(\"Você deseja realmente excluir essa dívida?\")) return null\n        setIsLoading(true)\n        debtsRequests.deleteDebtById(debtId)\n            .then((r) => {\n                if (r.r) {\n                    setIsLoading(false)\n                    setListDebts(listDebts.filter(debt => debt._id !== debtId))\n                    setTotalCountDebts(totalCountDebts - 1)\n                    setTotalPages(Math.ceil(totalCountDebts / SIZE_DEFAULT_PAGE))\n                }\n            })\n            .catch(\n                err => {\n                    setIsLoading(false)\n                    console.log(err)\n                }\n            )\n    }\n    function handlePaginationChange(ev, { activePage }) {\n        setActivePage(activePage)\n    }\n    function renderDebtRow(debt) {\n        return (\n            <Table.Row\n                textAlign='center'\n                key={debt._id}\n                onClick={() => {\n                    setDebtSelected(debt)\n                    setModalIsOpened(true)\n                }}\n            >\n                <Table.Cell>{debt.userName}</Table.Cell>\n                <Table.Cell> {debt.createdAt\n                    ? format(\n                        new Date(debt.createdAt),\n                        'dd/MM/yyyy HH:mm',\n                        {\n                            locale: br,\n                        },\n                    )\n                    : null}</Table.Cell>\n                <Table.Cell>{debt.reason}</Table.Cell>\n                <Table.Cell>{debt.debtDate ? format(\n                    new Date(debt.debtDate),\n                    'dd/MM/yyyy',\n                    {\n                        locale: br,\n                    },\n                )\n                    : null}</Table.Cell>\n                <Table.Cell>{debt.value}</Table.Cell>\n                <Table.Cell >\n                    <div style={{ padding: 20 }} onClick={(e) => {\n                        e.stopPropagation()\n                        removeDebt(debt._id)\n                    }}>\n                        <Icon name=\"trash alternate\" />\n                    </div>\n\n\n                </Table.Cell>\n            </Table.Row>\n        );\n    }\n\n    return (\n        <Container>\n            <Breadcrumb>\n                <Breadcrumb.Section href=\"#/\">\n                    Início\n                        </Breadcrumb.Section>\n                <Breadcrumb.Divider icon=\"right angle\" />\n                <Breadcrumb.Section active>Dívidas</Breadcrumb.Section>\n            </Breadcrumb>\n\n            <div className=\"small-margin-top text-right\">\n                <Button\n                    onClick={() => setModalIsOpened(true)}>\n                    Nova dívida\n                </Button>\n\n            </div>\n            <div>\n                <Form\n                    onSubmit={() =>\n                        this.setState({ page: 1 }, () => this.getPlaces())\n                    }\n                >\n                    <Form.Group>\n                        <Form.Field\n                            id=\"form-input-control-last-name\"\n                            control={Dropdown}\n                            width={6}\n                            label=\"Ordenação\"\n                            selection\n                            search\n                            disabled={isLoading}\n                            options={OPTIONS_SORT}\n                            value={sortSearch}\n                            onChange={(ev, { value }) =>\n                                setSortSearch(value)\n                            }\n                        />\n                    </Form.Group>\n                </Form>\n\n            </div>\n            {!isLoading && (\n                <div className=\"text-right\">\n                    <small>\n                        {totalCountDebts} resultados.\n                            </small>\n                </div>\n            )}\n            <Table padded='very'>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Nome</Table.HeaderCell>\n                        <Table.HeaderCell>Data de criação</Table.HeaderCell>\n                        <Table.HeaderCell>Motivo</Table.HeaderCell>\n                        <Table.HeaderCell>Data da dívida</Table.HeaderCell>\n                        <Table.HeaderCell>Valor</Table.HeaderCell>\n                        <Table.HeaderCell>Ações</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {\n                        listDebts.map(debt => renderDebtRow(debt))\n                    }\n                </Table.Body>\n            </Table>\n            <Pagination defaultActivePage={activePage} disabled={isLoading} onPageChange={handlePaginationChange} totalPages={totalPages} />\n\n\n            <DebtForm debt={debtSelected} isOpened={modalIsOpened} onClose={() => {\n                setIsUpdatedList(!isUpdatedList)\n                setDebtSelected({})\n                setModalIsOpened(false)\n            }} />\n\n        </Container>\n    );\n};\n\nexport default DebtsList;","export const SIZE_DEFAULT_PAGE = 30","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport DebtsList from './DebtsList';\nimport './index.css'\n\nconst Debts = () => {\n    return (\n        <>\n            <Switch>\n                <Route path=\"/dividas\" component={DebtsList} exact />\n            </Switch>\n        </>\n    );\n};\n\nexport default Debts;","import Login from './Pages/Login'\nimport Debts from './Pages/Debts'\nimport {\n  Route,\n  Switch,\n} from 'react-router-dom';\n\nfunction App() {\n  const hasTokenValid = true\n\n\n  if (!hasTokenValid) return <Login />\n  return (\n    <Switch>\n      <Route\n        path=\"/\"\n        render={() => (\n          <>\n            <div className=\"general-container\">\n              <Route path=\"/dividas\" exact component={Debts} />\n            </div>\n          </>\n        )}\n      />\n    </Switch>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom';\n\nimport 'semantic-ui-css/semantic.min.css'\n\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}